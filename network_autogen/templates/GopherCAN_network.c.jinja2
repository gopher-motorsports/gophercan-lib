// AUTO_GENERATED BY network_autogen/autogen.py

#include "GopherCAN_network.h"
#include "cmsis_os.h"

// *** MESSAGE BUFFERS ***

CAN_MSG RX_MEM[RX_BUFFER_SIZE];
CAN_BUFFER RX_BUFF = {
    .messages = RX_MEM,
    .size = RX_BUFFER_SIZE,
    .fill = 0,
    .head = 0,
    .mutex = NULL
};

{% for bus_id in buses -%}
CAN_MSG TX_MEM_{{ bus_id }}[TX_BUFFER_SIZE];
CAN_BUFFER TX_BUFF_{{ bus_id }} = {
    .messages = TX_MEM_{{ bus_id }},
    .size = TX_BUFFER_SIZE,
    .fill = 0,
    .head = 0,
    .mutex = NULL
};

{% endfor -%}

// *** BUSES ***

{% for bus_id in buses -%}
CAN_BUS BUS_{{ bus_id }} = {
    .id = {{ bus_id }},
    .hcan = NULL,
    .tx_buffer = &TX_BUFF_{{ bus_id }}
};

{% endfor -%}

CAN_BUS* BUSES[ALL_BUSSES] = {
    {% for bus_id in buses -%}
    &BUS_{{ bus_id }},
    {% endfor %}
};

// *** MODULES ***

BUS_ID module_bus_number[NUM_OF_MODULES] = {
    ALL_BUSSES,
    {% for name, module in modules.items() -%}
    {{ module.buses[0] }},
    {% endfor %}
};

// *** PARAMETERS ***

CAN_INFO_STRUCT empty_param = {0};
{% for id, param in parameters.items() %}
{{ param_structs[param.type] }} {{ param.name }} = {
    .info = {
        .ID = {{ param.name.upper() }}_ID,
        .GROUP_ID = {{ param.group_id }},
        .TYPE = {{ param.type }},
        .SIZE = {{ param.type }}_SIZE,
        .ENC = {{ param.encoding }},
        .ENC_SIZE = {{ param.length }},
        .SCALE = {{ param.scale }},
        .OFFSET = {{ param.offset }},
        .last_tx = 0,
        .last_rx = 0,
        .pending_response = 0,
    },
    .data = 0
};
{% endfor %}
void* PARAMETERS[NUM_OF_PARAMETERS] = {
    &empty_param,
    {% for id, param in parameters.items() -%}
    &{{ param.name }},
    {% endfor %}
};

// *** GROUPS ***

PARAM_GROUP GROUPS[NUM_OF_GROUPS] = {
    {% for id, group in groups.items() -%}
    {
        .group_id = {{ id }},
        .param_ids = {
            {%- for name in group %}{{ name }}, {% endfor -%}}
    },
    {% endfor %}
};

// *** INITIALIZATION ***

{% for bus_id in buses -%}
osMutexDef (TX_MUTEX_{{ bus_id }});
{% endfor %}
void GCAN_InitNetwork() {
    static uint8_t init_done = 0;
    if (!init_done) {
        {% for bus_id in buses -%}
        BUS_{{ bus_id }}.tx_buffer->mutex = osMutexCreate (osMutex(TX_MUTEX_{{ bus_id }}));
        {% endfor %}
        init_done = 1;
    }
}